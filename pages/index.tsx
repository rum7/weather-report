import Head from "next/head";
import React, { useState } from "react";
import { BsSearch } from "react-icons/bs";

import WeatherCity from '../components/weatherCity';
import WeatherCityDaily from '../components/weatherCityDaily';
import { WeatherData, WeatherDataDaily } from '../types/types'

export default function Home() {
  const [weatherCity, setWeatherCity] = useState<WeatherData[]>([]);
  const [weatherCityDaily, setWeatherCityDaily] = useState<WeatherDataDaily[]>([]);
  let weatherData: (WeatherData)[] = [];
  let WeatherDataDaily: (WeatherDataDaily)[] = [];

  const [loading, setLoading] = useState<boolean>(false);

  const fetchWeatherCity = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    setLoading(true)
    weatherData = [];

    const userLocale = navigator.languages && navigator.languages.length ?
      navigator.languages[0]
      : navigator.language;

    const myCity: string = (event.target as HTMLFormElement).searchCity.value;
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${myCity}&lang=${userLocale}&units=metric&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;
    
    try {
      const res = await fetch(url);
      if (res.status === 200) {
        const data = await res.json();
        setTimeout(() => {
          weatherData.push(data);
          setWeatherCity(weatherData);
        }, 500);
      } else {
        // throw Error('Error fetching users list')
        throw new Error('New error fetching users list')
      }
    } catch (error) {
      // setIsError(true)
      return { notFound: true };
    }

    setTimeout(() => {
      setLoading(false)
    }, 1000);
  };

  const fetchWeatherCityDaily = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    WeatherDataDaily = [];

    const myCity: string = (event.target as HTMLFormElement).searchCity.value;
    const url = `https://api.openweathermap.org/data/2.5/forecast?q=${myCity}&lang=fr&units=metric&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`;

    try {
      const res = await fetch(url);
      if (res.status === 200) {
        const data = await res.json();
        setTimeout(() => {
          WeatherDataDaily.push(data);
          setWeatherCityDaily(WeatherDataDaily);
        }, 500);
      } else {
        // throw Error('Error fetching users list')
        throw new Error('New error fetching users list')
      }
    } catch (error) {
      return { notFound: true };
    }
  };

  return (
    <>
      <Head>
        <title>Weather report</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.css"></link>
      </Head>

      <main className="animate-in flex flex-wrap flex-col m-5 mx-auto sm:my-5 w-[335px] sm:w-[560px] lg:w-[720px]">
        <h2 className="mt-2 mb-5 text-7xl uppercase text-night-forest">Weather report</h2>
        <form 
          onSubmit={(event) => {{fetchWeatherCity(event)};{fetchWeatherCityDaily(event)}}} 
          className="flex justify-between items-center py-2 bg-transparent border-b border-rainy-blue"
        >
          <input 
            type="search" 
            name="search" 
            id="searchCity"
            className="w-full text-rainy-blue bg-transparent focus:outline-none"
            placeholder="Search city..." 
          />
          <button type="submit" className="text-night-forest"><BsSearch /></button>
        </form>

        <div className="flex flex-col items-center">
          {/* Until we have data store in our variable, we show nothing */}
          {weatherCity.length === 0 ? ('')
          :(
            <div className="animate-in mt-10 w-full text-white rounded-2xl bg-king-blue bg-opacity-25 b-shadow">
              <WeatherCity fetching={loading} dataCity={weatherCity} />
              <WeatherCityDaily fetching={loading} dataCityDaily={weatherCityDaily} />
            </div>
          )}
        </div>

      </main>
    </>
  );
}